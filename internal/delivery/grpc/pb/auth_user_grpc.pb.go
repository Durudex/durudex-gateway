// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	types "github.com/durudex/durudex-gateway/internal/delivery/grpc/pb/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthUserServiceClient is the client API for AuthUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthUserServiceClient interface {
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*types.ID, error)
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*Tokens, error)
	RefreshTokens(ctx context.Context, in *RefreshTokensRequest, opts ...grpc.CallOption) (*Tokens, error)
}

type authUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthUserServiceClient(cc grpc.ClientConnInterface) AuthUserServiceClient {
	return &authUserServiceClient{cc}
}

func (c *authUserServiceClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*types.ID, error) {
	out := new(types.ID)
	err := c.cc.Invoke(ctx, "/durudex.user.AuthUserService/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authUserServiceClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*Tokens, error) {
	out := new(Tokens)
	err := c.cc.Invoke(ctx, "/durudex.user.AuthUserService/SignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authUserServiceClient) RefreshTokens(ctx context.Context, in *RefreshTokensRequest, opts ...grpc.CallOption) (*Tokens, error) {
	out := new(Tokens)
	err := c.cc.Invoke(ctx, "/durudex.user.AuthUserService/RefreshTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthUserServiceServer is the server API for AuthUserService service.
// All implementations must embed UnimplementedAuthUserServiceServer
// for forward compatibility
type AuthUserServiceServer interface {
	SignUp(context.Context, *SignUpRequest) (*types.ID, error)
	SignIn(context.Context, *SignInRequest) (*Tokens, error)
	RefreshTokens(context.Context, *RefreshTokensRequest) (*Tokens, error)
	mustEmbedUnimplementedAuthUserServiceServer()
}

// UnimplementedAuthUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthUserServiceServer struct {
}

func (UnimplementedAuthUserServiceServer) SignUp(context.Context, *SignUpRequest) (*types.ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedAuthUserServiceServer) SignIn(context.Context, *SignInRequest) (*Tokens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedAuthUserServiceServer) RefreshTokens(context.Context, *RefreshTokensRequest) (*Tokens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshTokens not implemented")
}
func (UnimplementedAuthUserServiceServer) mustEmbedUnimplementedAuthUserServiceServer() {}

// UnsafeAuthUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthUserServiceServer will
// result in compilation errors.
type UnsafeAuthUserServiceServer interface {
	mustEmbedUnimplementedAuthUserServiceServer()
}

func RegisterAuthUserServiceServer(s grpc.ServiceRegistrar, srv AuthUserServiceServer) {
	s.RegisterService(&AuthUserService_ServiceDesc, srv)
}

func _AuthUserService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUserServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/durudex.user.AuthUserService/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUserServiceServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthUserService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUserServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/durudex.user.AuthUserService/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUserServiceServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthUserService_RefreshTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUserServiceServer).RefreshTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/durudex.user.AuthUserService/RefreshTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUserServiceServer).RefreshTokens(ctx, req.(*RefreshTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthUserService_ServiceDesc is the grpc.ServiceDesc for AuthUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "durudex.user.AuthUserService",
	HandlerType: (*AuthUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _AuthUserService_SignUp_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _AuthUserService_SignIn_Handler,
		},
		{
			MethodName: "RefreshTokens",
			Handler:    _AuthUserService_RefreshTokens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/delivery/grpc/pb/auth_user.proto",
}
